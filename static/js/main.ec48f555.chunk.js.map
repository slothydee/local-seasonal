{"version":3,"sources":["regionSeasonProduce/RegionSeason.js","firebase/db.js","regionSeasonProduce/Produce.js","regionSeasonProduce/Home.js","App.js","reportWebVitals.js","index.js"],"names":["RegionSeason","onRegionSelectionChange","onSeasonSelectionChange","onClickRegionSelection","event","target","name","preventDefault","onClickSeasonSelection","useEffect","Regions","ButtonGroup","onClick","Seasons","className","initializeApp","apiKey","process","authDomain","projectId","db","getFirestore","PRODUCE_COLLECTION","Produce","region","season","useState","produceList","setProduceList","isProduceModalOpen","setProduceModalOpen","detailedProduce","setProduceDetailed","mounted","regionSeason","fetchData","a","produceRef","collection","q","query","where","getDocs","querySnapshot","fetched","docs","map","doc","id","data","handleModalOpen","alt","handleModalClose","SingleProduce","modalDisplayProduce","find","obj","showHideClassName","produceName","detailString","type","toUpperCase","item","src","handleClose","Home","handleRegionSelection","handleSeasonSelection","regionSelected","setRegionSelection","seasonSelected","setSeasonSelection","childRegionSelected","childSeasonSelected","color","document","body","style","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec48f555.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\n\nexport default function RegionSeason({\n  onRegionSelectionChange,\n  onSeasonSelectionChange,\n}) {\n  const onClickRegionSelection = (event) => {\n    onRegionSelectionChange(event.target.name);\n    event.preventDefault();\n  };\n\n  const onClickSeasonSelection = (event) => {\n    onSeasonSelectionChange(event.target.name);\n    event.preventDefault();\n  };\n  // todo set color\n  useEffect(() => {});\n\n  const Regions = () => {\n    return (\n      <ButtonGroup>\n        <button onClick={onClickRegionSelection} name=\"pnw\">\n          PNW\n        </button>\n        <button onClick={onClickRegionSelection} name=\"sw\">\n          SW\n        </button>\n        <button onClick={onClickRegionSelection} name=\"mw\">\n          MW\n        </button>\n        <button onClick={onClickRegionSelection} name=\"s\">\n          S\n        </button>\n        <button onClick={onClickRegionSelection} name=\"ne\">\n          NE\n        </button>\n      </ButtonGroup>\n    );\n  };\n\n  const Seasons = () => {\n    return (\n      <ButtonGroup>\n        <button onClick={onClickSeasonSelection} name=\"Spring\">\n          Spring\n        </button>\n        <button onClick={onClickSeasonSelection} name=\"Summer\">\n          Summer\n        </button>\n        <button onClick={onClickSeasonSelection} name=\"Fall\">\n          Fall\n        </button>\n        <button onClick={onClickSeasonSelection} name=\"Winter\">\n          Winter\n        </button>\n      </ButtonGroup>\n    );\n  };\n\n  return (\n    <>\n      <header className=\"RegionSeason__Header\">\n        Select A Region\n        <Regions />\n      </header>\n      <header className=\"RegionSeason__Header\">\n        Select A Season\n        <Seasons />\n      </header>\n    </>\n  );\n}\n\nRegionSeason.propTypes = {\n  onRegionSelectionChange: PropTypes.func,\n  onSeasonSelectionChange: PropTypes.func,\n};\n","import { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\n\ninitializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n});\n\nconst db = getFirestore();\n\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\nimport db from \"../firebase/db\";\n\nconst PRODUCE_COLLECTION = \"/produce\";\n\nexport default function Produce({ region, season }) {\n  const [produceList, setProduceList] = useState();\n  const [isProduceModalOpen, setProduceModalOpen] = useState(false);\n  const [detailedProduce, setProduceDetailed] = useState();\n\n  useEffect(() => {\n    let mounted = true;\n    const regionSeason = `${region}${season}`;\n    if (!regionSeason) return;\n\n    async function fetchData() {\n      const produceRef = collection(db, PRODUCE_COLLECTION);\n      const q = query(produceRef, where(regionSeason, \"==\", true));\n\n      const querySnapshot = await getDocs(q);\n      if (mounted) {\n        const fetched = querySnapshot.docs.map((doc) => {\n          return {\n            id: doc.id,\n            ...doc.data(),\n          };\n        });\n\n        setProduceList(fetched);\n      }\n    }\n    fetchData();\n    return () => (mounted = false);\n  }, [region, season]);\n\n  const handleModalOpen = (event) => {\n    setProduceDetailed(event.target.alt);\n    setProduceModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setProduceModalOpen(false);\n  };\n\n  const SingleProduce = () => {\n    let modalDisplayProduce;\n    if (produceList && detailedProduce) {\n      modalDisplayProduce = produceList.find((obj) => {\n        return obj.id === detailedProduce;\n      });\n    }\n    const showHideClassName = isProduceModalOpen\n      ? \"modal display-block\"\n      : \"modal display-none\";\n    return (\n      <div className={showHideClassName}>\n        <section className=\"modal-main\">\n          <header>\n            {modalDisplayProduce ? modalDisplayProduce.produceName : null}\n          </header>\n          {modalDisplayProduce ? modalDisplayProduce.detailString : null}\n          <footer>\n            <button type=\"button\" onClick={handleModalClose}>\n              Close\n            </button>\n          </footer>\n        </section>\n      </div>\n    );\n  };\n  return (\n    <>\n      <header>\n        {season && region\n          ? `${season} produce in the ${region.toUpperCase()}`\n          : null}\n      </header>\n      <div className=\"produce-container\">\n        {produceList\n          ? produceList.map((item) => (\n              <div className=\"produce-child\" key={item.id}>\n                <img\n                  src={item.src}\n                  alt={item.id}\n                  onClick={handleModalOpen}\n                ></img>\n              </div>\n            ))\n          : null}\n      </div>\n      <div>\n        <SingleProduce handleClose={handleModalClose}></SingleProduce>\n      </div>\n    </>\n  );\n}\n\nProduce.propTypes = {\n  region: PropTypes.string,\n  season: PropTypes.string,\n};\n","import RegionSeason from \"./RegionSeason\";\nimport Produce from \"./Produce\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Home(handleRegionSelection, handleSeasonSelection) {\n  const [regionSelected, setRegionSelection] = useState();\n  const [seasonSelected, setSeasonSelection] = useState();\n\n  handleRegionSelection = (childRegionSelected) => {\n    // if (childRegionSelected === regionSelected) return;\n    setRegionSelection(childRegionSelected);\n  };\n  handleSeasonSelection = (childSeasonSelected) => {\n    // if (childSeasonSelected === seasonSelected) return;\n    setSeasonSelection(childSeasonSelected);\n  };\n\n  useEffect(() => {\n    let color;\n    switch (seasonSelected) {\n      case \"summer\":\n        color = \"yellow\";\n        break;\n      default:\n        color = \"black\";\n        break;\n    }\n    document.body.style.backgroundColor = color;\n  });\n\n  return (\n    <div className=\"Home\">\n      <RegionSeason\n        onRegionSelectionChange={handleRegionSelection}\n        onSeasonSelectionChange={handleSeasonSelection}\n      />\n      <Produce region={regionSelected} season={seasonSelected} />\n    </div>\n  );\n}\n\nHome.propTypes = {\n  handleRegionSelection: PropTypes.func,\n  handleSeasonSelection: PropTypes.func,\n};\n","import \"./App.css\";\nimport Home from \"./regionSeasonProduce/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home></Home>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}